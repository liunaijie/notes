package top.lnj.leetcode;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

/**
 * @author LiuNaiJie
 * on 2019-07-30
 * 按递增顺序显示卡牌
 */
public class T950 {

	/**
	 * 牌组中的每张卡牌都对应有一个唯一的整数。你可以按你想要的顺序对这套卡片进行排序。
	 * 最初，这些卡牌在牌组里是正面朝下的（即，未显示状态）。
	 * 现在，重复执行以下步骤，直到显示所有卡牌为止：
	 * 从牌组顶部抽一张牌，显示它，然后将其从牌组中移出。
	 * 如果牌组中仍有牌，则将下一张处于牌组顶部的牌放在牌组的底部。
	 * 如果仍有未显示的牌，那么返回步骤 1。否则，停止行动。
	 * 返回能以递增顺序显示卡牌的牌组顺序。
	 * 答案中的第一张牌被认为处于牌堆顶部。
	 * <p>
	 * 示例：
	 * <p>
	 * 输入：[17,13,11,2,3,5,7]
	 * 输出：[2,13,3,11,5,17,7]
	 * 解释：
	 * 我们得到的牌组顺序为 [17,13,11,2,3,5,7]（这个顺序不重要），然后将其重新排序。
	 * 重新排序后，牌组以 [2,13,3,11,5,17,7] 开始，其中 2 位于牌组的顶部。
	 * 我们显示 2，然后将 13 移到底部。牌组现在是 [3,11,5,17,7,13]。
	 * 我们显示 3，并将 11 移到底部。牌组现在是 [5,17,7,13,11]。
	 * 我们显示 5，然后将 17 移到底部。牌组现在是 [7,13,11,17]。
	 * 我们显示 7，并将 13 移到底部。牌组现在是 [11,17,13]。
	 * 我们显示 11，然后将 17 移到底部。牌组现在是 [13,17]。
	 * 我们展示 13，然后将 17 移到底部。牌组现在是 [17]。
	 * 我们显示 17。
	 * 由于所有卡片都是按递增顺序排列显示的，所以答案是正确的。
	 * 提示：
	 * <p>
	 * 1 <= A.length <= 1000
	 * 1 <= A[i] <= 10^6
	 * 对于所有的 i != j，A[i] != A[j]
	 */


	/**
	 * 解题思路
	 * 拿到他的实例反着看，就比较好看出规律来：
	 *
	 * 1.先将参数数组排序，
	 * 2.将最大值放到队列中
	 * 3.然后将队列中最后一个放到队列开头
	 * 4.将剩余参数中最大值放到队列中
	 * 5.如果不是最后一个参数，则继续执行第3步
	 * 6.得到的队列与我们实际要求的结果顺序的反的，再反一下就得到结果了
	 *
	 * @param deck
	 * @return
	 */
	public int[] deckRevealedIncreasing(int[] deck) {
		if (deck == null || deck.length <= 1) {
			return deck;
		}
		//1. 执行排序
		Arrays.sort(deck);
		Queue<Integer> result = new LinkedList<Integer>();
		for (int i = deck.length - 1; i >= 0; i--) {
			//2.4 将参数放到队列中
			result.add(deck[i]);
			if (i != 0) {
				//3. 当不是最后一个参数时，将队列中的最后一个值放到队列开始
				result.add(result.poll());
			}
		}
		// 6 将队列反转
		for (int i = result.size() - 1; i >= 0; i--) {
			deck[i] = result.poll();
		}
		return deck;
	}


}
